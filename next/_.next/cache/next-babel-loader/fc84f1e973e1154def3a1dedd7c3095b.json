{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport { Modal, Button, Form, Alert, Container, Row, Col } from \"react-bootstrap\";\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useRouter } from \"next/router\";\nimport Page from '../../../components/Page';\nimport Layout from '../../../components/Layouts';\nimport { post } from '../../../services/http';\nimport './styles.scss';\n\nfunction AccessLogin(props) {\n  var router = useRouter();\n  var dispatch = useDispatch();\n  var crumbs = [{\n    name: 'Recuperar Senha'\n  }];\n  var pageTitle = 'Recuperar Senha';\n  useEffect(function () {\n    if (props.status && props.status.success) {\n      toast.success(\"Bem vindo(a) \".concat(props.status.data.user.name), {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      dispatch(setUser(props.status.data));\n      router.push('/');\n    }\n  }, [props.status]);\n  return __jsx(Page, {\n    title: pageTitle,\n    crumbs: crumbs\n  }, __jsx(Layout, {\n    pageTitle: pageTitle\n  }, __jsx(Form, {\n    onSubmit: props.handleSubmit,\n    className: \"mt-2\"\n  }, props.errors.error && __jsx(Alert, {\n    variant: \"danger\"\n  }, __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.error)), __jsx(Form.Group, {\n    controlId: \"formBasicEmail\",\n    className: \"mt-4\"\n  }, __jsx(Form.Label, null, \"E-mail\"), __jsx(Form.Control, {\n    type: \"email\",\n    value: props.values.email,\n    onChange: function onChange(e) {\n      return props.setFieldValue('email', e.target.value);\n    },\n    placeholder: \"E-mail\"\n  }), props.touched.email && props.errors.email && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.email)), __jsx(\"div\", {\n    className: \"d-flex justify-content-between\"\n  }, __jsx(Link, {\n    href: \"/auth/access\"\n  }, __jsx(\"a\", {\n    className: \"btn btn-secondary\"\n  }, \"Cancelar\")), __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\"\n  }, \"Acessar minha Conta\")))));\n}\n\nexport default withFormik({\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      email: ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email('Informe um e-mail válido').required('Informe seu e-mail')\n  }),\n  handleSubmit: function handleSubmit(values, _ref) {\n    var setSubmitting, setErrors, props, setStatus, result;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSubmitting = _ref.setSubmitting, setErrors = _ref.setErrors, props = _ref.props, setStatus = _ref.setStatus;\n            _context.prev = 1;\n            setSubmitting(true);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(post('/auth/forgotPassword', values));\n\n          case 5:\n            result = _context.sent;\n\n            if (result.success) {\n              setSubmitting(false);\n              setStatus({\n                success: true,\n                data: result\n              });\n            } else {\n              setSubmitting(false);\n              setErrors({\n                error: 'E-mail inválido'\n              });\n            }\n\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            setErrors({\n              error: 'E-mail ou senha inválidos'\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 9]]);\n  }\n})(AccessLogin);","map":null,"metadata":{},"sourceType":"module"}