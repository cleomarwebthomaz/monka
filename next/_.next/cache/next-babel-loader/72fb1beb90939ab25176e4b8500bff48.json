{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from \"react\";\nimport { Form, Alert } from \"react-bootstrap\";\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from \"react-redux\";\nimport { toast } from 'react-toastify';\nimport Spinner from '../../../Spinner';\nimport { setUser } from '../../../../store/actions/auth';\nimport { post } from '../../../../services/http';\nimport './styles.scss';\n\nfunction FormRegister(props) {\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (props.status && props.status.success) {\n      dispatch(setUser(props.status.data));\n      toast.success(\"Seja bem vindo(a) \".concat(props.status.data.user.name), {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      props.onSuccess();\n    }\n  }, [props.status]);\n  return __jsx(Form, {\n    onSubmit: props.handleSubmit\n  }, props.errors.error && __jsx(Alert, {\n    variant: \"danger\"\n  }, __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.error)), __jsx(Form.Group, {\n    controlId: \"formName\"\n  }, __jsx(Form.Label, null, \"Nome\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: props.values.name,\n    onChange: function onChange(e) {\n      return props.setFieldValue('name', e.target.value);\n    },\n    placeholder: \"Seu nome Completo\"\n  }), props.touched.name && props.errors.name && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.name)), __jsx(Form.Group, {\n    controlId: \"formEmail\"\n  }, __jsx(Form.Label, null, \"E-mail\"), __jsx(Form.Control, {\n    type: \"email\",\n    value: props.values.email,\n    onChange: function onChange(e) {\n      return props.setFieldValue('email', e.target.value);\n    },\n    placeholder: \"E-mail\"\n  }), props.touched.email && props.errors.email && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.email)), __jsx(Form.Group, {\n    controlId: \"formPhone\"\n  }, __jsx(Form.Label, null, \"Celular\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: props.values.phone,\n    onChange: function onChange(e) {\n      return props.setFieldValue('phone', e.target.value);\n    },\n    placeholder: \"Celular\"\n  }), props.touched.phone && props.errors.phone && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.phone)), __jsx(Form.Group, {\n    controlId: \"formPersonType\"\n  }, __jsx(Form.Label, null, \"Tipo de Pessoa\"), __jsx(Form.Control, {\n    as: \"select\",\n    value: props.values.person_type,\n    onChange: function onChange(e) {\n      return props.setFieldValue('person_type', e.target.value);\n    }\n  }, __jsx(\"option\", {\n    value: \"individual\"\n  }, \"Pessoa F\\xEDsica\"), __jsx(\"option\", {\n    value: \"legal\"\n  }, \"Pessoa Jur\\xEDdica\")), props.touched.person_type && props.errors.person_type && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.person_type)), __jsx(Form.Group, {\n    controlId: \"formDocument\"\n  }, __jsx(Form.Label, null, props.values.person_type === 'legal' ? 'CNPJ' : 'CPF'), __jsx(Form.Control, {\n    type: \"text\",\n    value: props.values.document,\n    onChange: function onChange(e) {\n      return props.setFieldValue('document', e.target.value);\n    },\n    placeholder: props.values.person_type === 'legal' ? 'CNPJ' : 'CPF'\n  }), props.touched.document && props.errors.document && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.document)), __jsx(Form.Group, null, __jsx(Form.Label, null, \"Senha\"), __jsx(Form.Control, {\n    type: \"password\",\n    placeholder: \"Digite uma senha com mais de 4 caracteres\",\n    value: props.values.password,\n    onChange: function onChange(e) {\n      return props.setFieldValue('password', e.target.value);\n    }\n  }), props.touched.password && props.errors.password && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.password)), props.values.password.length >= 3 && __jsx(Form.Group, null, __jsx(Form.Label, null, \"Confirme a Senha\"), __jsx(Form.Control, {\n    type: \"password\",\n    placeholder: \"Confirme a Senha\",\n    value: props.values.confirm_password,\n    onChange: function onChange(e) {\n      return props.setFieldValue('confirm_password', e.target.value);\n    }\n  }), props.touched.confirm_password && props.errors.confirm_password && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.confirm_password)), __jsx(\"div\", {\n    className: \"mt-3 mb-5 d-flex justify-content-between\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-light\",\n    type: \"button\",\n    onClick: function onClick() {\n      return props.onCancel(false);\n    }\n  }, \"Fazer Login\", __jsx(\"i\", {\n    className: \"fas fa-disk\"\n  })), __jsx(\"button\", {\n    className: \"btn btn-primary\",\n    type: \"submit\"\n  }, \"Cadastre-se\", __jsx(\"i\", {\n    className: \"fas fa-disk\"\n  }), props.isSubmitting && __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\"\n  }))));\n}\n\nexport default withFormik({\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      name: 'tetse d eteste',\n      email: Math.random() + '@mail.co',\n      password: 'cleomar201',\n      confirm_password: 'cleomar201',\n      person_type: 'individual',\n      document: '570.294.160-82',\n      phone: '49561561616156'\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Informe seu nome').test('real', 'Informe seu nome completo.', function (value) {\n      if (!value) return;\n      var count = value.split(' ');\n\n      if (!count[1]) {\n        return false;\n      }\n\n      return true;\n    }),\n    email: Yup.string().email('Informe um e-mail válido').required('Informe seu e-mail'),\n    phone: Yup.string().required('Esse campo é obrigatório'),\n    password: Yup.string().min(4, 'Digite uma senha com mais de 4 caracteres').required('Digite uma senha'),\n    confirm_password: Yup.string().required('Esse campo é obrigatório').oneOf([Yup.ref('password'), null], 'As senhas não correspondem'),\n    document: Yup.string().required('Esse campo é obrigatório')\n  }),\n  handleSubmit: function handleSubmit(values, _ref) {\n    var setSubmitting, setErrors, props, setStatus, result;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSubmitting = _ref.setSubmitting, setErrors = _ref.setErrors, props = _ref.props, setStatus = _ref.setStatus;\n            _context.prev = 1;\n            setSubmitting(true);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(post('/auth/register', values));\n\n          case 5:\n            result = _context.sent;\n\n            if (result.success) {\n              setStatus({\n                success: true,\n                data: result\n              });\n            }\n\n            if (result.errorValidation) {\n              result.error.map(function (e) {\n                var error = {};\n                error[e.field] = e.message;\n                setErrors(error);\n              });\n            }\n\n            _context.next = 14;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n            setErrors({\n              error: 'Não foi possível realizar seu cadastro. Tente novamente mais tarde.'\n            });\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 10]]);\n  }\n})(FormRegister);","map":null,"metadata":{},"sourceType":"module"}