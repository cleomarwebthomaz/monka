{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Form } from \"react-bootstrap\";\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useRouter } from \"next/router\";\nimport FormRegister from '../../../components/Pages/Auth/Register/form';\n\nfunction AccessRegister(props) {\n  const route = useRouter();\n\n  function onSuccess() {\n    route.push('/');\n  }\n\n  return __jsx(\"div\", {\n    className: props.continueRegister ? 'mt-0' : 'mt-5'\n  }, !props.continueRegister && __jsx(React.Fragment, null, __jsx(\"h4\", null, \"N\\xE3o tem uma conta? Cadastre-se\"), __jsx(\"hr\", null)), props.continueRegister && __jsx(FormRegister, {\n    onContinueRegister: () => props.onContinueRegister(false),\n    onSuccess: onSuccess\n  }), !props.continueRegister && __jsx(Form, {\n    onSubmit: props.handleSubmit\n  }, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Nome\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: props.values.name,\n    onChange: e => props.setFieldValue('name', e.target.value),\n    placeholder: \"Seu nome Completo\"\n  }), props.touched.name && props.errors.name && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.name)), __jsx(Form.Group, null, __jsx(Form.Label, null, \"E-mail\"), __jsx(Form.Control, {\n    type: \"email\",\n    value: props.values.email,\n    onChange: e => props.setFieldValue('email', e.target.value),\n    placeholder: \"E-mail\"\n  }), props.touched.email && props.errors.email && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.email)), __jsx(\"div\", {\n    className: \"mt-3 mb-5 d-flex justify-content-between\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-primary\",\n    type: \"button\",\n    onClick: () => props.onContinueRegister(true)\n  }, \"Cadastre-se\", __jsx(\"i\", {\n    className: \"fas fa-disk\"\n  })))));\n}\n\nexport default withFormik({\n  mapPropsToValues: props => ({\n    name: '',\n    email: ''\n  }),\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Informe seu nome').test('real', 'Informe seu nome completo.', value => {\n      if (!value) return;\n      const count = value.split(' ');\n\n      if (!count[1]) {\n        return false;\n      }\n\n      return true;\n    }),\n    email: Yup.string().email('Informe um e-mail vÃ¡lido').required('Informe seu e-mail')\n  }),\n  handleSubmit: async (values, {\n    setSubmitting,\n    setErrors,\n    props,\n    setStatus\n  }) => {\n    setStatus({\n      continue: true\n    });\n  }\n})(AccessRegister);","map":null,"metadata":{},"sourceType":"module"}