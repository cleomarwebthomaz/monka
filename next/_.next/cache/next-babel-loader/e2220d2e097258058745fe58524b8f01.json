{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport { Form, Button, Spinner, Alert } from 'react-bootstrap';\nimport { useRouter } from 'next/router';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { toast } from 'react-toastify';\nimport { useEffect } from 'react';\nimport { withRouter } from 'next/router';\nimport Layout from '../../../../components/Layouts';\nimport Page from '../../../../components/Page';\nimport { post } from '../../../../services/http';\n\nfunction ChangePasswordForm(props) {\n  const router = useRouter();\n  useEffect(() => {\n    const token = props.router.query.token;\n    props.setFieldValue('token', token);\n  }, []);\n  useEffect(() => {\n    if (props.status && props.status.success) {\n      toast.success('Sua senha alterada com sucesso. Faça o login!', {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      router.push('/auth/access');\n    }\n  }, [props.status]);\n  const crumbs = [{\n    name: 'Alterar Senha'\n  }];\n  const pageTitle = 'Alterar minha Senha';\n  return __jsx(Page, {\n    crumbs: crumbs,\n    title: pageTitle\n  }, __jsx(Layout, {\n    pageTitle: pageTitle\n  }, __jsx(Form, {\n    onSubmit: props.handleSubmit\n  }, props.errors.error && __jsx(Alert, {\n    variant: \"danger\"\n  }, __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.error)), __jsx(Form.Group, null, __jsx(Form.Label, null, \"Nova Senha\"), __jsx(Form.Control, {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Nova Senha\",\n    onChange: e => props.setFieldValue('password', e.target.value),\n    value: props.values.password\n  }), props.touched.password && props.errors.password && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.password)), __jsx(Form.Group, null, __jsx(Form.Label, null, \"Confirme a nova Senha\"), __jsx(Form.Control, {\n    type: \"password\",\n    name: \"confirm_password\",\n    placeholder: \"Confirme a nova Senha\",\n    onChange: e => props.setFieldValue('confirm_password', e.target.value),\n    value: props.values.confirm_password\n  }), props.touched.confirm_password && props.errors.confirm_password && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.confirm_password)), __jsx(\"div\", {\n    className: \"mt-3 mb-5 d-flex justify-content-between\"\n  }, __jsx(Link, {\n    href: \"/auth/forgot-password\"\n  }, __jsx(\"a\", {\n    className: \"btn btn-secondary\"\n  }, \"Solicitar novo token\")), __jsx(\"button\", {\n    className: \"btn btn-primary\",\n    type: \"submit\"\n  }, \"Salvar\", __jsx(\"i\", {\n    className: \"fas fa-disk\"\n  }), props.isSubmitting && __jsx(Spinner, null))))));\n}\n\nexport default withFormik({\n  mapPropsToValues: props => ({\n    password: '',\n    confirm_password: '',\n    token: ''\n  }),\n  validationSchema: Yup.object().shape({\n    password: Yup.string().required('Informe uma nova senha').min(5, 'A senha deve ter no mínimo 5 caracteres'),\n    confirm_password: Yup.string().oneOf([Yup.ref('password'), null], 'As senhas não correspondem')\n  }),\n  handleSubmit: async (values, {\n    setSubmitting,\n    setErrors,\n    setStatus\n  }) => {\n    try {\n      setSubmitting(true);\n      const data = await post(`/auth/recoverPassword`, values);\n\n      if (data.success) {\n        setSubmitting(false);\n        setStatus({\n          success: true\n        });\n      }\n\n      if (data.error) {\n        setErrors({\n          error: data.error\n        });\n      }\n\n      if (!data) {\n        setErrors({\n          error: 'Token inválido. Solicite um novo token.'\n        });\n      }\n    } catch (error) {\n      setErrors({\n        error: 'Não foi possível alterar a senha. Tente novamente.'\n      });\n    }\n  }\n})(withRouter(ChangePasswordForm));","map":null,"metadata":{},"sourceType":"module"}