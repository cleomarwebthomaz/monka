{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Modal, Button, Form, Alert } from \"react-bootstrap\";\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport FormRegister from '../../../components/Pages/Auth/Register/form';\nimport { setUser } from '../../../store/actions/auth';\nimport { post } from '../../../services/http';\nimport './styles.scss';\n\nfunction LoginModal(props) {\n  const {\n    0: showRegister,\n    1: setShowRegister\n  } = useState(false);\n  const dispatch = useDispatch();\n\n  if (props.status && props.status.success) {\n    dispatch(setUser(props.status.data));\n  }\n\n  return __jsx(React.Fragment, null, showRegister && __jsx(Modal, {\n    show: showRegister,\n    onHide: () => setShowRegister(false),\n    size: \"lg\"\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Cadastre-se\")), __jsx(Modal.Body, null, __jsx(FormRegister, {\n    onCancel: () => setShowRegister(false),\n    onSuccess: () => {\n      props.onSuccess();\n    }\n  }))), !showRegister && __jsx(Modal, {\n    show: props.showLogin,\n    onHide: props.closeModal,\n    size: \"lg\"\n  }, __jsx(Form, {\n    onSubmit: props.handleSubmit\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Acesse sua conta\")), __jsx(Modal.Body, null, props.errors.error && __jsx(Alert, {\n    variant: \"danger\"\n  }, __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.error)), __jsx(Form.Group, {\n    controlId: \"formBasicEmail\"\n  }, __jsx(Form.Label, null, \"E-mail\"), __jsx(Form.Control, {\n    type: \"email\",\n    value: props.values.email,\n    onChange: e => props.setFieldValue('email', e.target.value),\n    placeholder: \"E-mail\"\n  }), props.touched.email && props.errors.email && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.email)), __jsx(Form.Group, {\n    controlId: \"formBasicPassword\"\n  }, __jsx(Form.Label, null, \"Senha\"), __jsx(Form.Control, {\n    type: \"password\",\n    placeholder: \"Senha\",\n    value: props.values.password,\n    onChange: e => props.setFieldValue('password', e.target.value)\n  }), props.touched.password && props.errors.password && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.password))), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: () => setShowRegister(true)\n  }, \"Cadastre-se\"), __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\"\n  }, \"Acessar minha Conta\")))));\n}\n\nexport default withFormik({\n  mapPropsToValues: props => ({\n    email: '',\n    password: ''\n  }),\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email('Informe um e-mail válido').required('Informe seu e-mail'),\n    password: Yup.string().required('Informe sua senha')\n  }),\n  handleSubmit: async (values, {\n    setSubmitting,\n    setErrors,\n    props,\n    setStatus\n  }) => {\n    try {\n      setSubmitting(true);\n      const result = await post('/auth/login', values);\n\n      if (result.success) {\n        setSubmitting(false);\n        setStatus({\n          success: true,\n          data: result\n        });\n      } else {\n        setSubmitting(false);\n        setErrors({\n          error: 'E-mail ou senha inválidos'\n        });\n      }\n    } catch (error) {\n      setErrors({\n        error: 'E-mail ou senha inválidos'\n      });\n    }\n  }\n})(LoginModal);","map":null,"metadata":{},"sourceType":"module"}