{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nimport cookie from \"js-cookie\";\nimport { url as baseUrl } from '../config';\nexport function get(url, params = {}) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await fetch(baseUrl + url, {\n        method: 'GET',\n        headers: {\n          // 'Content-Type': 'application/json',\n          'Authorization': `Bearer ${cookie.get('token')}`\n        }\n      });\n      const data = await res.json();\n      resolve(data);\n    } catch (error) {\n      reject(error.message);\n      console.log(error);\n    }\n  });\n}\nexport function post(url, values) {\n  return new Promise(async resolve => {\n    const token = cookie.get('token');\n    const res = await fetch(baseUrl + url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token || ''}`\n      },\n      body: JSON.stringify(values)\n    });\n    const data = await res.json();\n    resolve(data);\n  });\n}\nexport function patch(url, values) {\n  return new Promise(async resolve => {\n    const res = await fetch(baseUrl + url, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${cookie.get('token')}`\n      },\n      body: JSON.stringify(values)\n    });\n    const data = await res.json();\n    resolve(data);\n  });\n}\nexport function httpDelete(url) {\n  return new Promise(async resolve => {\n    const res = await fetch(baseUrl + url, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${cookie.get('token')}`\n      }\n    });\n    const data = await res.json();\n    resolve(data);\n  });\n}","map":{"version":3,"sources":["/Users/webthomaz/Desktop/Desenvolvimento/m/monka/nps/monka-api/next/services/http.js"],"names":["fetch","cookie","url","baseUrl","get","params","Promise","resolve","reject","res","method","headers","data","json","error","message","console","log","post","values","token","body","JSON","stringify","patch","httpDelete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,SAASC,GAAG,IAAIC,OAAhB,QAA+B,WAA/B;AAEA,OAAO,SAASC,GAAT,CAAaF,GAAb,EAAkBG,MAAM,GAAG,EAA3B,EAA+B;AAClC,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMT,KAAK,CAACG,OAAO,GAAGD,GAAX,EAAgB;AACnCQ,QAAAA,MAAM,EAAE,KAD2B;AAEnCC,QAAAA,OAAO,EAAE;AACT;AACA,2BAAkB,UAASV,MAAM,CAACG,GAAP,CAAW,OAAX,CAAoB;AAFtC;AAF0B,OAAhB,CAAvB;AAQA,YAAMQ,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAAnB;AAEAN,MAAAA,OAAO,CAACK,IAAD,CAAP;AACH,KAZD,CAYE,OAAOE,KAAP,EAAc;AACZN,MAAAA,MAAM,CAACM,KAAK,CAACC,OAAP,CAAN;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACH;AACJ,GAjBM,CAAP;AAkBH;AAED,OAAO,SAASI,IAAT,CAAchB,GAAd,EAAmBiB,MAAnB,EAA2B;AAC9B,SAAO,IAAIb,OAAJ,CAAY,MAAOC,OAAP,IAAmB;AAElC,UAAMa,KAAK,GAAGnB,MAAM,CAACG,GAAP,CAAW,OAAX,CAAd;AAEA,UAAMK,GAAG,GAAG,MAAMT,KAAK,CAACG,OAAO,GAAGD,GAAX,EAAgB;AACnCQ,MAAAA,MAAM,EAAE,MAD2B;AAEnCC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,yBAAkB,UAASS,KAAK,IAAI,EAAG;AAFhC,OAF0B;AAMnCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,MAAf;AAN6B,KAAhB,CAAvB;AASA,UAAMP,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAAnB;AAEAN,IAAAA,OAAO,CAACK,IAAD,CAAP;AACH,GAhBM,CAAP;AAiBH;AAED,OAAO,SAASY,KAAT,CAAetB,GAAf,EAAoBiB,MAApB,EAA4B;AAC/B,SAAO,IAAIb,OAAJ,CAAY,MAAOC,OAAP,IAAmB;AAElC,UAAME,GAAG,GAAG,MAAMT,KAAK,CAACG,OAAO,GAAGD,GAAX,EAAgB;AACnCQ,MAAAA,MAAM,EAAE,OAD2B;AAEnCC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,yBAAkB,UAASV,MAAM,CAACG,GAAP,CAAW,OAAX,CAAoB;AAFxC,OAF0B;AAMnCiB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,MAAf;AAN6B,KAAhB,CAAvB;AASA,UAAMP,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAAnB;AAEAN,IAAAA,OAAO,CAACK,IAAD,CAAP;AACH,GAdM,CAAP;AAeH;AAED,OAAO,SAASa,UAAT,CAAoBvB,GAApB,EAAyB;AAC5B,SAAO,IAAII,OAAJ,CAAY,MAAOC,OAAP,IAAmB;AAElC,UAAME,GAAG,GAAG,MAAMT,KAAK,CAACG,OAAO,GAAGD,GAAX,EAAgB;AACnCQ,MAAAA,MAAM,EAAE,QAD2B;AAEnCC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,yBAAkB,UAASV,MAAM,CAACG,GAAP,CAAW,OAAX,CAAoB;AAFxC;AAF0B,KAAhB,CAAvB;AAQA,UAAMQ,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAAnB;AAEAN,IAAAA,OAAO,CAACK,IAAD,CAAP;AACH,GAbM,CAAP;AAcH","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport cookie from \"js-cookie\";\n\nimport { url as baseUrl } from '../config';\n\nexport function get(url, params = {}) {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const res = await fetch(baseUrl + url, {\n                method: 'GET',\n                headers: {\n                // 'Content-Type': 'application/json',\n                'Authorization': `Bearer ${cookie.get('token')}`\n                },\n            });\n\n            const data = await res.json();\n\n            resolve(data);\n        } catch (error) {\n            reject(error.message);\n            console.log(error);\n        }\n    });\n}\n\nexport function post(url, values) {\n    return new Promise(async (resolve) => {\n\n        const token = cookie.get('token');\n\n        const res = await fetch(baseUrl + url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token || ''}`\n            },\n            body: JSON.stringify(values)\n        });\n\n        const data = await res.json();\n\n        resolve(data);\n    });\n}\n\nexport function patch(url, values) {\n    return new Promise(async (resolve) => {\n\n        const res = await fetch(baseUrl + url, {\n            method: 'PATCH',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${cookie.get('token')}`\n            },\n            body: JSON.stringify(values)\n        });\n\n        const data = await res.json();\n\n        resolve(data);\n    });\n}\n\nexport function httpDelete(url) {\n    return new Promise(async (resolve) => {\n\n        const res = await fetch(baseUrl + url, {\n            method: 'DELETE',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${cookie.get('token')}`\n            },\n        });\n\n        const data = await res.json();\n\n        resolve(data);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}