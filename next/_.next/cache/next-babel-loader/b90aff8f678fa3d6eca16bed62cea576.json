{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as actionTypes from '../../types/breadcrumb';\nconst INITIAL_STATE = {\n  crumbs: []\n};\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_CRUMB:\n      return _objectSpread({}, state, {\n        crumbs: [...state.crumbs, action.payload]\n      });\n      break;\n\n    case actionTypes.CRUMB_CLEAR:\n      return _objectSpread({}, state, {\n        crumbs: []\n      });\n      break;\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/webthomaz/Desktop/Desenvolvimento/m/monka/api/next/store/reducers/breadcrumb/index.js"],"names":["actionTypes","INITIAL_STATE","crumbs","state","action","type","ADD_CRUMB","payload","CRUMB_CLEAR"],"mappings":";;;;;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,MAAM,EAAE;AADU,CAAtB;AAIA,gBAAe,CAACC,KAAK,GAAGF,aAAT,EAAwBG,MAAxB,KAAmC;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKL,WAAW,CAACM,SAAjB;AACI,+BAAWH,KAAX;AAAkBD,QAAAA,MAAM,EAAE,CAAC,GAAGC,KAAK,CAACD,MAAV,EAAkBE,MAAM,CAACG,OAAzB;AAA1B;AACJ;;AAGA,SAAKP,WAAW,CAACQ,WAAjB;AACI,+BAAWL,KAAX;AAAkBD,QAAAA,MAAM,EAAE;AAA1B;AACJ;;AAEA;AACI,aAAOC,KAAP;AAXR;AAaH,CAdD","sourcesContent":["import * as actionTypes from '../../types/breadcrumb';\n\nconst INITIAL_STATE = {\n    crumbs: []\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch(action.type) {\n        case actionTypes.ADD_CRUMB:\n            return {...state, crumbs: [...state.crumbs, action.payload]};\n        break;\n\n\n        case actionTypes.CRUMB_CLEAR:\n            return {...state, crumbs: []};\n        break;\n\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}