{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport { useRouter } from 'next/router';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { toast } from 'react-toastify';\nimport { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { withRouter } from 'next/router';\nimport Spinner from '../../Spinner';\nimport Loading from '../../Loading';\nimport { get, patch, post } from '../../../services/http';\n\nfunction ChangePasswordForm(props) {\n  const router = useRouter();\n  const {\n    0: neighborhoods,\n    1: setNeighborhoods\n  } = useState([]);\n  useEffect(() => {\n    if (props.status && props.status.success) {\n      toast.success('Salvo com sucesso!', {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      router.push('/account/addresses');\n    }\n  }, [props.status]);\n  useEffect(() => {\n    async function getNeighborhoods() {\n      const result = await get('/neighborhood');\n      const data = result.map(neighborhood => {\n        return {\n          label: neighborhood.name,\n          value: neighborhood.id\n        };\n      });\n      setNeighborhoods(data);\n    }\n\n    getNeighborhoods();\n  }, [props.router]);\n  useEffect(() => {\n    async function getNeighborhood() {\n      if (props.router.query.id && neighborhoods.length > 0) {\n        const result = await get(`/myAddress/${props.router.query.id}`);\n        const neighborhood = neighborhoods.find(item => item.value === result.neighborhood_id);\n        props.setFieldValue('id', result.id);\n        props.setFieldValue('street', result.street);\n        props.setFieldValue('number', result.number);\n        props.setFieldValue('complement', result.complement || '');\n        props.setFieldValue('neighborhood_id', neighborhood);\n      }\n    }\n\n    getNeighborhood();\n  }, [neighborhoods]);\n  if (neighborhoods.length <= 0) return __jsx(Loading, null);\n  return __jsx(Form, {\n    onSubmit: props.handleSubmit\n  }, __jsx(Row, null, __jsx(Col, null, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Cidade\"), __jsx(Form.Control, {\n    value: \"Cascavel PR\",\n    disabled: true\n  }))), __jsx(Col, null, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Bairro\"), __jsx(Select, {\n    options: neighborhoods,\n    placeholder: \"Selecione o Bairro\",\n    value: props.values.neighborhood_id,\n    onChange: value => props.setFieldValue('neighborhood_id', value)\n  }), props.touched.neighborhood_id && props.errors.neighborhood_id && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.neighborhood_id)))), __jsx(Row, null, __jsx(Col, {\n    xs: 8\n  }, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Rua\"), __jsx(Form.Control, {\n    onChange: e => props.setFieldValue('street', e.target.value),\n    value: props.values.street\n  }), props.touched.street && props.errors.street && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.street))), __jsx(Col, null, __jsx(Form.Group, null, __jsx(Form.Label, null, \"N\\xBA\"), __jsx(Form.Control, {\n    type: \"number\",\n    onChange: e => props.setFieldValue('number', e.target.value),\n    value: props.values.number\n  }), props.touched.number && props.errors.number && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.number)))), __jsx(Form.Group, null, __jsx(Form.Label, null, \"Complemento\"), __jsx(Form.Control, {\n    as: \"textarea\",\n    rows: \"3\",\n    value: props.values.complement,\n    onChange: e => props.setFieldValue('complement', e.target.value)\n  }), props.touched.complement && props.errors.complement && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.complement)), __jsx(\"div\", {\n    className: \"mt-3 mb-5 d-flex justify-content-end\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-primary\",\n    type: \"submit\",\n    disabled: props.isSubmitting\n  }, \"Salvar\", __jsx(\"i\", {\n    className: \"fas fa-disk\"\n  }), props.isSubmitting && __jsx(Spinner, null))));\n}\n\nexport default withFormik({\n  mapPropsToValues: props => ({\n    id: '',\n    street: '',\n    number: '',\n    neighborhood_id: {},\n    complement: ''\n  }),\n  validationSchema: Yup.object().shape({\n    street: Yup.string().required('Informe uma nova senha'),\n    number: Yup.number().required('Informe o número').positive('Digite apenas número').integer('Digite apenas número'),\n    neighborhood_id: Yup.object().required('Selecione o bairro')\n  }),\n  handleSubmit: async (values, {\n    setSubmitting,\n    setErrors,\n    setStatus\n  }) => {\n    try {\n      setSubmitting(true);\n\n      if (!values.neighborhood_id.value) {\n        return setErrors({\n          neighborhood_id: 'Selecione o bairro'\n        });\n      }\n\n      let result;\n\n      if (values.id) {\n        result = await patch(`/myAddress/${values.id}`, _objectSpread({}, values, {\n          neighborhood_id: values.neighborhood_id.value\n        }));\n      } else {\n        result = await post(`/myAddress`, _objectSpread({}, values, {\n          neighborhood_id: values.neighborhood_id.value\n        }));\n      }\n\n      if (result.success) {\n        setSubmitting(false);\n        setStatus({\n          success: true\n        });\n      }\n\n      if (result.validations) {\n        result.validations.map(e => {\n          let error = {};\n          error[e.field] = e.message;\n          setErrors(error);\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      setErrors({\n        error: 'Não foi possível salvar. Tente novamente.'\n      });\n    }\n  }\n})(withRouter(ChangePasswordForm));","map":null,"metadata":{},"sourceType":"module"}