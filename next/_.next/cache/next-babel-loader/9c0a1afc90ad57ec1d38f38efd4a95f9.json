{"ast":null,"code":"var _jsxFileName = \"/Users/webthomaz/Desktop/Desenvolvimento/m/monka/monka-api/next/pages/auth/Modal/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Modal, Button, Form, Alert } from \"react-bootstrap\";\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport FormRegister from '../../../components/Pages/Auth/Register/form';\nimport { setUser } from '../../../store/actions/auth';\nimport { post } from '../../../services/http';\nimport './styles.scss';\n\nfunction LoginModal(props) {\n  const {\n    0: showRegister,\n    1: setShowRegister\n  } = useState(false);\n  const dispatch = useDispatch();\n\n  if (props.status && props.status.success) {\n    dispatch(setUser(props.status.data));\n  }\n\n  return __jsx(React.Fragment, null, showRegister && __jsx(Modal, {\n    show: showRegister,\n    onHide: () => setShowRegister(false),\n    size: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(Modal.Header, {\n    closeButton: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(Modal.Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Cadastre-se\")), __jsx(Modal.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, __jsx(FormRegister, {\n    onCancel: () => setShowRegister(false),\n    onSuccess: () => {\n      props.onSuccess();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }))), !showRegister && __jsx(Modal, {\n    show: props.showLogin,\n    onHide: props.closeModal,\n    size: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(Form, {\n    onSubmit: props.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(Modal.Header, {\n    closeButton: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(Modal.Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Acesse sua conta\")), __jsx(Modal.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, props.errors.error && __jsx(Alert, {\n    variant: \"danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(Form.Control.Feedback, {\n    type: \"invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, props.errors.error)), __jsx(Form.Group, {\n    controlId: \"formBasicEmail\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"E-mail\"), __jsx(Form.Control, {\n    type: \"email\",\n    value: props.values.email,\n    onChange: e => props.setFieldValue('email', e.target.value),\n    placeholder: \"E-mail\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), props.touched.email && props.errors.email && __jsx(Form.Control.Feedback, {\n    type: \"invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, props.errors.email)), __jsx(Form.Group, {\n    controlId: \"formBasicPassword\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Senha\"), __jsx(Form.Control, {\n    type: \"password\",\n    placeholder: \"Senha\",\n    value: props.values.password,\n    onChange: e => props.setFieldValue('password', e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), props.touched.password && props.errors.password && __jsx(Form.Control.Feedback, {\n    type: \"invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, props.errors.password))), __jsx(Modal.Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: () => setShowRegister(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Cadastre-se\"), __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Acessar minha Conta\")))));\n}\n\nexport default withFormik({\n  mapPropsToValues: props => ({\n    email: '',\n    password: ''\n  }),\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email('Informe um e-mail válido').required('Informe seu e-mail'),\n    password: Yup.string().required('Informe sua senha')\n  }),\n  handleSubmit: async (values, {\n    setSubmitting,\n    setErrors,\n    props,\n    setStatus\n  }) => {\n    try {\n      setSubmitting(true);\n      const result = await post('/auth/login', values);\n\n      if (result.success) {\n        setSubmitting(false);\n        setStatus({\n          success: true,\n          data: result\n        });\n      } else {\n        setSubmitting(false);\n        setErrors({\n          error: 'E-mail ou senha inválidos'\n        });\n      }\n    } catch (error) {\n      setErrors({\n        error: 'E-mail ou senha inválidos'\n      });\n    }\n  }\n})(LoginModal);","map":{"version":3,"sources":["/Users/webthomaz/Desktop/Desenvolvimento/m/monka/monka-api/next/pages/auth/Modal/index.js"],"names":["Modal","Button","Form","Alert","withFormik","Yup","useDispatch","useState","FormRegister","setUser","post","LoginModal","props","showRegister","setShowRegister","dispatch","status","success","data","onSuccess","showLogin","closeModal","handleSubmit","errors","error","values","email","e","setFieldValue","target","value","touched","password","mapPropsToValues","validationSchema","object","shape","string","required","setSubmitting","setErrors","setStatus","result"],"mappings":"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","sourcesContent":["import { Modal, Button, Form, Alert } from \"react-bootstrap\";\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\n\nimport FormRegister from '../../../components/Pages/Auth/Register/form';\n\nimport { setUser } from '../../../store/actions/auth';\nimport { post } from '../../../services/http';\n\nimport './styles.scss';\n\nfunction LoginModal(props) {\n  const [showRegister, setShowRegister] = useState(false);\n    const dispatch = useDispatch();\n\n    if (props.status && props.status.success) {\n      dispatch(setUser(props.status.data));\n    }\n  \n    return (\n      <>\n        {showRegister && \n          <Modal show={showRegister} onHide={() => setShowRegister(false)} size=\"lg\">\n              <Modal.Header closeButton>\n                <Modal.Title>Cadastre-se</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <FormRegister \n                  onCancel={() => setShowRegister(false)}\n                  onSuccess={() => {\n                    props.onSuccess();\n                  }}\n                />\n              </Modal.Body>\n          </Modal>\n        }\n\n        {!showRegister &&\n          <Modal show={props.showLogin} onHide={props.closeModal} size=\"lg\">\n            <Form onSubmit={props.handleSubmit}>\n              <Modal.Header closeButton>\n                <Modal.Title>Acesse sua conta</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n\n                {props.errors.error &&\n                  <Alert variant=\"danger\">\n                          <Form.Control.Feedback type=\"invalid\">{props.errors.error}</Form.Control.Feedback>\n                  </Alert>\n                }\n\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>E-mail</Form.Label>\n                    <Form.Control \n                        type=\"email\" \n                        value={props.values.email}\n                        onChange={e => props.setFieldValue('email', e.target.value)}\n                        placeholder=\"E-mail\"\n                    />\n                    {props.touched.email && props.errors.email && \n                        <Form.Control.Feedback type=\"invalid\">{props.errors.email}</Form.Control.Feedback>\n                    }\n                </Form.Group>\n\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Senha</Form.Label>\n                    <Form.Control \n                      type=\"password\" \n                      placeholder=\"Senha\" \n                      value={props.values.password}\n                      onChange={e => props.setFieldValue('password', e.target.value)}\n                    />\n                    {props.touched.password && props.errors.password && \n                        <Form.Control.Feedback type=\"invalid\">{props.errors.password}</Form.Control.Feedback>\n                    }                  \n                </Form.Group>\n\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => setShowRegister(true)}>\n                    Cadastre-se\n                </Button>\n                <Button variant=\"primary\" type=\"submit\">\n                    Acessar minha Conta\n                </Button>\n              </Modal.Footer>\n            </Form>\n          </Modal>\n        }\n      </>\n    );\n}\n\nexport default withFormik({\n  mapPropsToValues: props => ({ \n      email: '',\n      password: ''\n  }),\n\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email('Informe um e-mail válido')\n        .required('Informe seu e-mail'),\n    password: Yup.string()\n        .required('Informe sua senha'),\n  }),\n\n  handleSubmit: async (values, { setSubmitting, setErrors, props, setStatus }) => {\n      try {\n        setSubmitting(true);\n        const result = await post('/auth/login', values);\n\n        if (result.success) {\n            setSubmitting(false);\n            setStatus({ success: true, data: result });\n            \n        } else {\n            setSubmitting(false);\n            setErrors({ error: 'E-mail ou senha inválidos' });\n        }\n\n      } catch(error) {\n          setErrors({ error: 'E-mail ou senha inválidos' });\n      }\n  },\n\n})(LoginModal);\n\n"]},"metadata":{},"sourceType":"module"}