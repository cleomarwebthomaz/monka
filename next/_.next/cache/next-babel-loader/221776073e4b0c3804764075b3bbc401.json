{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Form } from \"react-bootstrap\";\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useRouter } from \"next/router\";\nimport FormRegister from '../../../components/Pages/Auth/Register/form';\n\nfunction AccessRegister(props) {\n  var route = useRouter();\n\n  function onSuccess() {\n    route.push('/auth/access/register-address');\n  }\n\n  return __jsx(\"div\", {\n    className: props.continueRegister ? 'mt-0' : 'mt-5'\n  }, !props.continueRegister && __jsx(React.Fragment, null, __jsx(\"h4\", null, \"N\\xE3o tem uma conta? Cadastre-se\"), __jsx(\"hr\", null)), props.continueRegister && __jsx(FormRegister, {\n    onContinueRegister: function onContinueRegister() {\n      return props.onContinueRegister(false);\n    },\n    onSuccess: onSuccess\n  }), !props.continueRegister && __jsx(Form, {\n    onSubmit: props.handleSubmit\n  }, __jsx(Form.Group, null, __jsx(Form.Label, null, \"Nome\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: props.values.name,\n    onChange: function onChange(e) {\n      return props.setFieldValue('name', e.target.value);\n    },\n    placeholder: \"Seu nome Completo\"\n  }), props.touched.name && props.errors.name && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.name)), __jsx(Form.Group, null, __jsx(Form.Label, null, \"E-mail\"), __jsx(Form.Control, {\n    type: \"email\",\n    value: props.values.email,\n    onChange: function onChange(e) {\n      return props.setFieldValue('email', e.target.value);\n    },\n    placeholder: \"E-mail\"\n  }), props.touched.email && props.errors.email && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.email)), __jsx(\"div\", {\n    className: \"mt-3 mb-5 d-flex justify-content-between\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-primary\",\n    type: \"button\",\n    onClick: function onClick() {\n      return props.onContinueRegister(true);\n    }\n  }, \"Cadastre-se\", __jsx(\"i\", {\n    className: \"fas fa-disk\"\n  })))));\n}\n\nexport default withFormik({\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      name: '',\n      email: ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required('Informe seu nome').test('real', 'Informe seu nome completo.', function (value) {\n      if (!value) return;\n      var count = value.split(' ');\n\n      if (!count[1]) {\n        return false;\n      }\n\n      return true;\n    }),\n    email: Yup.string().email('Informe um e-mail v√°lido').required('Informe seu e-mail')\n  }),\n  handleSubmit: function handleSubmit(values, _ref) {\n    var setSubmitting, setErrors, props, setStatus;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSubmitting = _ref.setSubmitting, setErrors = _ref.setErrors, props = _ref.props, setStatus = _ref.setStatus;\n            setStatus({\n              \"continue\": true\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n})(AccessRegister);","map":null,"metadata":{},"sourceType":"module"}