{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { Container, Row, Col, Button, ListGroup, Spinner } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport LoginModal from '../../auth/Modal';\nimport Page from '../../../components/Page';\nimport Loading from '../../../components/Loading';\nimport Breadcrumb from '../../../components/Breadcrumb';\nimport Carousel from './Carousel';\nimport ProductGroups from './components/Groups';\nimport { loadCart } from '../../../store/actions/cart';\nimport currency from '../../../utils/currency';\nimport { addCrumb, clearCrumbs } from '../../../store/actions/breadcrumb';\nimport { get, post } from '../../../services/http';\nimport './styles.scss';\nimport PageTitle from '../../../components/PageTitle';\n\nconst ProductShow = props => {\n  const {\n    0: product,\n    1: setProduct\n  } = useState(props.product);\n  const {\n    0: quantity,\n    1: setQuantity\n  } = useState(props.product.quantity || 1);\n  const {\n    0: basePrice,\n    1: setBasePrice\n  } = useState(props.basePrice);\n  const {\n    0: totalPrice,\n    1: setTotalPrice\n  } = useState(props.basePrice);\n  const {\n    0: error,\n    1: setError\n  } = useState({});\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: showLoginModal,\n    1: setShowLoginModal\n  } = useState(false);\n  const {\n    isLogged\n  } = useSelector(state => state.auth);\n  const {\n    setting,\n    loaded\n  } = useSelector(state => state.setting);\n  const dispatch = useDispatch();\n  const router = useRouter();\n  useEffect(() => {\n    dispatch(clearCrumbs());\n    dispatch(addCrumb('Produtos', '/'));\n  }, []);\n  useEffect(() => {\n    updateProductPrices();\n  }, [quantity, basePrice, product]);\n\n  function incrementQuantity() {\n    let newQuantity = quantity;\n    newQuantity = newQuantity += 1;\n    setQuantity(newQuantity);\n  }\n\n  function decrementQuantity() {\n    let newQuantity = quantity;\n    newQuantity = newQuantity -= 1;\n    if (newQuantity <= 0) newQuantity = 1;\n    setQuantity(newQuantity);\n  }\n\n  function updateProductPrices(base) {\n    let total = 0;\n\n    if (base) {\n      setBasePrice(base);\n    } else {\n      base = basePrice;\n    }\n\n    if (product.groups.length > 0) {\n      for (let i in product.groups) {\n        const group = product.groups[i];\n\n        for (let key in group.options) {\n          const option = group.options[key];\n\n          if (option.quantity > 0) {\n            const totalOptionPrice = option.price * option.quantity;\n            total = total += totalOptionPrice;\n          }\n        }\n      }\n    }\n\n    const totalPrice = (base + total) * quantity;\n    setTotalPrice(totalPrice);\n  }\n\n  async function validateProductAddToCart() {\n    return new Promise((resolve, reject) => {\n      if (product.groups && product.groups.length > 0) {\n        product.groups.map(group => {\n          if (group.options && group.options.length > 0) {\n            let countSelects = 0;\n            group.options.filter(item => item.quantity > 0).map(op => {\n              countSelects = countSelects += op.quantity;\n            });\n\n            if (countSelects < group.min) {\n              return reject({\n                group_id: group.id,\n                title: group.name,\n                message: group.rules\n              });\n            }\n          }\n        });\n      }\n\n      resolve(true);\n    });\n  }\n\n  async function addCart(force = false) {\n    try {\n      if (setting.store_status.value !== \"1\") {\n        return;\n      }\n\n      if (!isLogged && !force) {\n        return setShowLoginModal(true);\n      }\n\n      setLoading(true);\n      setError({});\n      await validateProductAddToCart().then(async e => {\n        const productData = {\n          product_id: product.id,\n          quantity\n        };\n        productData.product_option_id = product.options.find(item => item.selected).id;\n        const listOptions = [];\n        product.groups.map(group => {\n          const hasOptions = group.options.filter(op => op.quantity > 0).length;\n\n          if (hasOptions > 0) {\n            group.options.filter(option => option.quantity > 0).map(option => {\n              listOptions.push({\n                product_group_option_id: option.id,\n                product_group_id: option.product_group_id,\n                quantity: option.quantity\n              });\n            });\n            return productData.options;\n          }\n        });\n        productData.options = listOptions;\n        await post('/cart', productData);\n        toast.success('Produto adicionado ao carrinho de compras', {\n          position: toast.POSITION.BOTTOM_CENTER\n        });\n        dispatch(loadCart());\n        router.push('/cart');\n      }).catch(error => {\n        setError(error);\n        setLoading(false);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  if (!loaded) return __jsx(Loading, null);\n  return __jsx(Page, {\n    title: product.name\n  }, __jsx(Container, {\n    className: \"mb-5 productShow\"\n  }, __jsx(Breadcrumb, null), !isLogged && __jsx(LoginModal, {\n    showLogin: showLoginModal,\n    closeModal: () => setShowLoginModal(false),\n    onSuccess: () => addCart(true)\n  }), __jsx(Row, null, __jsx(Col, {\n    xs: 6\n  }, __jsx(Carousel, {\n    images: product.images\n  }), __jsx(\"h4\", {\n    className: \"mt-5\"\n  }, \"Descri\\xE7\\xE3o\"), __jsx(\"p\", null, product.description)), __jsx(Col, {\n    className: \"pt-4\"\n  }, __jsx(PageTitle, {\n    className: \"name\",\n    title: product.name\n  }, product.name), __jsx(\"p\", null, product.short_description), __jsx(\"h1\", {\n    className: \"price\"\n  }, currency(totalPrice)), product.options && __jsx(ListGroup, {\n    className: \"options mt-4\",\n    horizontal: true\n  }, product.options.map(option => __jsx(ListGroup.Item, {\n    key: option.id,\n    active: option.selected,\n    onClick: () => {\n      product.options.map(op => op.selected = false);\n      option.selected = true;\n      setBasePrice(option.price);\n      setProduct(() => _objectSpread({}, product, {}, product));\n    }\n  }, option.name))), __jsx(ProductGroups, {\n    product: product,\n    groups: product.groups,\n    error: error,\n    onChange: data => {\n      setProduct(() => _objectSpread({}, product, {}, data));\n    }\n  }), __jsx(\"div\", {\n    className: \"d-flex mt-4\"\n  }, __jsx(Button, {\n    className: \"btn-quantity left btn-md\",\n    onClick: decrementQuantity\n  }, __jsx(\"i\", {\n    className: \"fas fa-minus-circle\"\n  })), __jsx(\"div\", {\n    className: \"quantity btn btn-md bg-light border-sm pl-3 pr-3 rounded-0\"\n  }, quantity || 1), __jsx(Button, {\n    className: \"btn-quantity right btn-md\",\n    onClick: incrementQuantity\n  }, __jsx(\"i\", {\n    className: \"fas fa-plus-circle\"\n  })), setting.store_status.value === \"1\" && __jsx(Button, {\n    className: \"btn-quantity right btn-md ml-3\",\n    disabled: loading,\n    onClick: () => addCart()\n  }, __jsx(\"i\", {\n    className: \"fas fa-shopping-cart\"\n  }), \" Comprar\", loading && __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\"\n  }, __jsx(\"span\", {\n    className: \"sr-only\"\n  }, \"Loading...\"))))))));\n};\n\nProductShow.getInitialProps = async function ({\n  query\n}) {\n  if (!query.slug) return {\n    error: true,\n    product: {}\n  };\n  const product = await get(`/product/${query.slug}`);\n  let basePrice = product.price;\n\n  if (product.options) {\n    basePrice = product.options[0].price;\n    product.options[0].selected = true;\n  }\n\n  return {\n    product,\n    basePrice\n  };\n};\n\nexport default ProductShow;","map":null,"metadata":{},"sourceType":"module"}