{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from 'react';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { ButtonGroup, ListGroup, Form, Spinner, Row, Col, Image, Card, Button, InputGroup } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { get, post, patch, httpDelete } from '../../../services/http';\nimport { loadCart } from '../../../store/actions/cart';\n\nfunction VoucherForm(props) {\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (props.status && props.status.success) {\n      dispatch(loadCart());\n      toast.success('Cupom aplicado com sucesso', {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    }\n  }, [props.status]);\n  return __jsx(Form, {\n    className: \"pl-3 pr-3\",\n    onSubmit: props.handleSubmit\n  }, __jsx(Form.Group, {\n    className: \"mt-4\"\n  }, __jsx(InputGroup, null, __jsx(Form.Control, {\n    value: props.values.code,\n    onChange: function onChange(e) {\n      return props.setFieldValue('code', e.target.value);\n    },\n    placeholder: \"Cupom\",\n    className: \"border-0 shadow\"\n  }), __jsx(InputGroup.Prepend, null, __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    disabled: props.isSubmitting\n  }, \"OK\", props.isSubmitting && __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\"\n  })))), props.touched.code && props.errors.code && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.code)));\n}\n\nexport default withFormik({\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      code: ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    code: Yup.string().required('Informe o código do cupom')\n  }),\n  handleSubmit: function handleSubmit(values, _ref) {\n    var setSubmitting, setErrors, setStatus, result;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSubmitting = _ref.setSubmitting, setErrors = _ref.setErrors, setStatus = _ref.setStatus;\n            _context.prev = 1;\n            setSubmitting(true);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(post(\"/cart/add-voucher\", values));\n\n          case 5:\n            result = _context.sent;\n\n            if (result.success) {\n              setStatus({\n                success: true,\n                data: result\n              });\n            } else {\n              setErrors({\n                code: result.error\n              });\n            }\n\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            setErrors({\n              error: 'N!ao foi possível válidar o cupom'\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 9]]);\n  }\n})(VoucherForm);","map":null,"metadata":{},"sourceType":"module"}