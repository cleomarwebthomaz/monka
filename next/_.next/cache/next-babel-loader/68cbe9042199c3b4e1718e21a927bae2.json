{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from 'react';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { ButtonGroup, ListGroup, Form, Spinner, Row, Col, Image, Card, Button, InputGroup } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { get, post, patch, httpDelete } from '../../../services/http';\nimport { loadCart } from '../../../store/actions/cart';\n\nfunction VoucherForm(props) {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (props.status && props.status.success) {\n      dispatch(loadCart());\n      toast.success('Cupom aplicado com sucesso', {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    }\n  }, [props.status]);\n  return __jsx(Form, {\n    className: \"pl-3 pr-3\",\n    onSubmit: props.handleSubmit\n  }, __jsx(Form.Group, {\n    className: \"mt-4\"\n  }, __jsx(InputGroup, null, __jsx(Form.Control, {\n    value: props.values.code,\n    onChange: e => props.setFieldValue('code', e.target.value),\n    placeholder: \"Cupom\",\n    className: \"border-0 shadow\"\n  }), __jsx(InputGroup.Prepend, null, __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    disabled: props.isSubmitting\n  }, \"OK\", props.isSubmitting && __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\"\n  })))), props.touched.code && props.errors.code && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.code)));\n}\n\nexport default withFormik({\n  mapPropsToValues: props => ({\n    code: ''\n  }),\n  validationSchema: Yup.object().shape({\n    code: Yup.string().required('Informe o código do cupom')\n  }),\n  handleSubmit: async (values, {\n    setSubmitting,\n    setErrors,\n    setStatus\n  }) => {\n    try {\n      setSubmitting(true);\n      const result = await post(`/cart/add-voucher`, values);\n\n      if (result.success) {\n        setStatus({\n          success: true,\n          data: result\n        });\n      } else {\n        setErrors({\n          code: result.error\n        });\n      }\n    } catch (error) {\n      setErrors({\n        error: 'N!ao foi possível válidar o cupom'\n      });\n    }\n  }\n})(VoucherForm);","map":null,"metadata":{},"sourceType":"module"}