{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/webthomaz/Desktop/Desenvolvimento/m/monka/monka-api/next/pages/account/change-password/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Form, Button, Spinner } from 'react-bootstrap';\nimport { useRouter } from 'next/router';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { ToastContainer, toast } from 'react-toastify';\nimport Layout from '../../../components/Layouts/Customer';\nimport Page from '../../../components/Page';\nimport { patch } from '../../../services/http';\nimport { useEffect } from 'react';\n\nfunction ChangePasswordForm(props) {\n  var router = useRouter();\n  useEffect(function () {\n    if (props.status && props.status.success) {\n      toast.success('Senha alterada com sucesso!', {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      router.push('/account');\n    }\n  }, [props.status]);\n  var crumbs = [{\n    name: 'Minha Conta',\n    link: '/account'\n  }, {\n    name: 'Alterar Senha'\n  }];\n  var pageTitle = 'Alterar minha Senha';\n  return __jsx(Page, {\n    crumbs: crumbs,\n    title: pageTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, __jsx(Layout, {\n    pageTitle: pageTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(Form, {\n    onSubmit: props.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(Form.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Nova Senha\"), __jsx(Form.Control, {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Nova Senha\",\n    onChange: function onChange(e) {\n      return props.setFieldValue('password', e.target.value);\n    },\n    value: props.values.password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), props.touched.password && props.errors.password && __jsx(Form.Control.Feedback, {\n    type: \"invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, props.errors.password)), __jsx(Form.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Confirme a nova Senha\"), __jsx(Form.Control, {\n    type: \"password\",\n    name: \"confirm_password\",\n    placeholder: \"Confirme a nova Senha\",\n    onChange: function onChange(e) {\n      return props.setFieldValue('confirm_password', e.target.value);\n    },\n    value: props.values.confirm_password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), props.touched.confirm_password && props.errors.confirm_password && __jsx(Form.Control.Feedback, {\n    type: \"invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, props.errors.confirm_password)), __jsx(\"div\", {\n    className: \"mt-3 mb-5 d-flex justify-content-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    className: \"btn btn-primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Salvar\", __jsx(\"i\", {\n    className: \"fas fa-disk\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), props.isSubmitting && __jsx(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }))))));\n}\n\nexport default withFormik({\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      password: '',\n      confirm_password: ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    password: Yup.string().required('Informe uma nova senha').min(5, 'A senha deve ter no mínimo 5 caracteres'),\n    confirm_password: Yup.string().oneOf([Yup.ref('password'), null], 'As senhas não correspondem')\n  }),\n  handleSubmit: function handleSubmit(values, _ref) {\n    var setSubmitting, setErrors, props, setStatus, data;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSubmitting = _ref.setSubmitting, setErrors = _ref.setErrors, props = _ref.props, setStatus = _ref.setStatus;\n            _context.prev = 1;\n            setSubmitting(true);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(patch(\"/profile/changePassword\", values));\n\n          case 5:\n            data = _context.sent;\n\n            if (data.success) {\n              setSubmitting(false);\n              setStatus({\n                success: true\n              });\n            }\n\n            if (data.validations) {\n              data.validations.map(function (e) {\n                var error = {};\n                error[e.field] = e.message;\n                setErrors(error);\n              });\n            }\n\n            _context.next = 14;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n            setErrors({\n              error: 'Não foi possível alterar a senha. Tente novamente.'\n            });\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 10]]);\n  }\n})(ChangePasswordForm);","map":{"version":3,"sources":["/Users/webthomaz/Desktop/Desenvolvimento/m/monka/monka-api/next/pages/account/change-password/index.js"],"names":["Form","Button","Spinner","useRouter","withFormik","Yup","ToastContainer","toast","Layout","Page","patch","useEffect","ChangePasswordForm","props","router","status","success","position","POSITION","BOTTOM_CENTER","push","crumbs","name","link","pageTitle","handleSubmit","e","setFieldValue","target","value","values","password","touched","errors","confirm_password","isSubmitting","mapPropsToValues","validationSchema","object","shape","string","required","min","oneOf","ref","setSubmitting","setErrors","setStatus","data","validations","map","error","field","message","console","log"],"mappings":"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","sourcesContent":["import { Form, Button, Spinner } from 'react-bootstrap';\nimport { useRouter } from 'next/router';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { ToastContainer, toast } from 'react-toastify';\n\nimport Layout from '../../../components/Layouts/Customer';\nimport Page from '../../../components/Page';\n\nimport { patch } from '../../../services/http';\nimport { useEffect } from 'react';\n\nfunction ChangePasswordForm(props) {\n    const router = useRouter();\n    \n    useEffect(() => {\n        if (props.status && props.status.success) {\n            toast.success('Senha alterada com sucesso!', {\n                position: toast.POSITION.BOTTOM_CENTER\n            });\n\n            router.push('/account');\n        }\n    }, [props.status])\n\n    const crumbs = [\n        { name: 'Minha Conta', link: '/account' },\n        { name: 'Alterar Senha' }\n    ];\n  \n    const pageTitle = 'Alterar minha Senha';\n\n    return (\n        <Page crumbs={crumbs} title={pageTitle}>\n            <Layout pageTitle={pageTitle}>\n\n                <Form onSubmit={props.handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Nova Senha</Form.Label>\n                        <Form.Control \n                            type=\"password\" \n                            name=\"password\"\n                            placeholder=\"Nova Senha\" \n                            onChange={e => props.setFieldValue('password', e.target.value)}\n                            value={props.values.password}\n                        />\n                        {props.touched.password && props.errors.password && \n                            <Form.Control.Feedback type=\"invalid\">{props.errors.password}</Form.Control.Feedback>\n                        }                        \n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Confirme a nova Senha</Form.Label>\n                        <Form.Control \n                            type=\"password\" \n                            name=\"confirm_password\"\n                            placeholder=\"Confirme a nova Senha\" \n                            onChange={e => props.setFieldValue('confirm_password', e.target.value)}\n                            value={props.values.confirm_password}\n                        />\n                        {props.touched.confirm_password && props.errors.confirm_password && \n                            <Form.Control.Feedback type=\"invalid\">{props.errors.confirm_password}</Form.Control.Feedback>\n                        }                        \n                    </Form.Group>\n                    <div className=\"mt-3 mb-5 d-flex justify-content-end\">\n                        <button className=\"btn btn-primary\" type=\"submit\">\n                            Salvar  \n                            <i className=\"fas fa-disk\"></i> \n                            {props.isSubmitting && <Spinner />}\n                        </button>\n                    </div>\n                </Form>\n            </Layout>\n        </Page>\n    );\n    \n}\n\nexport default withFormik({\n    mapPropsToValues: props => ({ \n        password: '', \n        confirm_password: '' \n    }),\n  \n    validationSchema: Yup.object().shape({\n        password: Yup.string()\n            .required('Informe uma nova senha')\n            .min(5, 'A senha deve ter no mínimo 5 caracteres'),\n        confirm_password: Yup.string()\n            .oneOf([Yup.ref('password'), null], 'As senhas não correspondem')\n    }),\n  \n    handleSubmit: async (values, { setSubmitting, setErrors, props, setStatus }) => {\n        try {\n          setSubmitting(true);\n          const data = await patch(`/profile/changePassword`, values);\n\n          if (data.success) {\n              setSubmitting(false);\n              setStatus({ success: true });\n          }\n  \n          if (data.validations) {\n              data.validations.map(e => {\n                  let error = {};\n                  error[e.field] = e.message;\n                  setErrors(error);\n              });\n          }\n  \n        } catch(error) {\n            console.log(error)\n            setErrors({ error: 'Não foi possível alterar a senha. Tente novamente.' });\n        }\n    },\n  \n  })(ChangePasswordForm);\n  \n  "]},"metadata":{},"sourceType":"module"}