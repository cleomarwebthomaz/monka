{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/webthomaz/Desktop/Desenvolvimento/m/monka/monka-api/next/pages/App.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { loginStorage } from '../store/actions/auth';\nimport { loadSettings } from '../store/actions/setting';\nimport { ToastContainer } from 'react-toastify';\nimport pusher from '../services/pusher';\nimport { get } from '../services/http';\n\nvar App = function App(props) {\n  var dispatch = useDispatch();\n  var auth = useSelector(function (state) {\n    return state.auth;\n  });\n  console.log(props.settings);\n  useEffect(function () {// pusher.bind(`updatedSettings`, function() {\n    //     dispatch(loadSettings());\n    // });\n    // dispatch(loadSettings());\n    // dispatch(loginStorage());\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, __jsx(ToastContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), props.children);\n};\n\nApp.getInitialProps = function _callee(ctx) {\n  var settings;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(get('/setting'));\n\n        case 2:\n          settings = _context.sent;\n          dd;\n          return _context.abrupt(\"return\", {\n            settings: settings\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/webthomaz/Desktop/Desenvolvimento/m/monka/monka-api/next/pages/App.js"],"names":["useDispatch","useSelector","useEffect","loginStorage","loadSettings","ToastContainer","pusher","get","App","props","dispatch","auth","state","console","log","settings","children","getInitialProps","ctx","dd"],"mappings":";;;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,OAA1B;AAEA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,cAAT,QAA+B,gBAA/B;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,GAAT,QAAoB,kBAApB;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,KAAD,EAAW;AACnB,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,MAAMW,IAAI,GAAGV,WAAW,CAAC,UAAAW,KAAK;AAAA,WAAIA,KAAK,CAACD,IAAV;AAAA,GAAN,CAAxB;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACM,QAAlB;AAEAb,EAAAA,SAAS,CAAC,YAAM,CAEZ;AACA;AACA;AAEA;AACA;AAEH,GATQ,EASN,EATM,CAAT;AAWA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKO,KAAK,CAACO,QAFX,CADJ;AAOH,CAxBD;;AA0BAR,GAAG,CAACS,eAAJ,GAAsB,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACKX,GAAG,CAAC,UAAD,CADR;;AAAA;AACZQ,UAAAA,QADY;AACqBI,UAAAA,EAAE;AADvB,2CAGX;AACHJ,YAAAA,QAAQ,EAARA;AADG,WAHW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;;AAQA,eAAeP,GAAf","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { loginStorage } from '../store/actions/auth';\nimport { loadSettings } from '../store/actions/setting';\nimport { ToastContainer } from 'react-toastify';\n\nimport pusher from '../services/pusher';\nimport { get } from '../services/http';\n\nconst App = (props) => {\n    const dispatch = useDispatch();\n    const auth = useSelector(state => state.auth);\n\n    console.log(props.settings)\n\n    useEffect(() => {\n\n        // pusher.bind(`updatedSettings`, function() {\n        //     dispatch(loadSettings());\n        // });\n        \n        // dispatch(loadSettings());\n        // dispatch(loginStorage());\n\n    }, []);\n\n    return (\n        <div>\n            <ToastContainer />\n            {props.children}\n        </div>\n    );\n\n}\n\nApp.getInitialProps = async ctx => {\n    const settings = await get('/setting');dd\n\n    return {\n        settings\n    }\n}\n \nexport default App; "]},"metadata":{},"sourceType":"module"}