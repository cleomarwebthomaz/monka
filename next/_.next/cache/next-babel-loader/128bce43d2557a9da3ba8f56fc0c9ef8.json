{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _withFormik;\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useRouter } from 'next/router';\nimport { toast } from 'react-toastify';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { Button, Form, Alert, Spinner } from \"react-bootstrap\";\nimport { useEffect } from \"react\";\nimport Layout from '../../../components/Layouts/Customer';\nimport Page from \"../../../components/Page\";\nimport { patch } from '../../../services/http';\nimport { setUserData } from \"../../../store/actions/auth\";\n\nfunction EditAccount(props) {\n  var _useSelector = useSelector(function (state) {\n    return state.auth;\n  }),\n      user = _useSelector.user,\n      isLogged = _useSelector.isLogged;\n\n  var router = useRouter();\n  var dispatch = useDispatch();\n  var crumbs = [{\n    name: 'Minha Conta'\n  }];\n  var pageTitle = 'Minha Conta';\n  useEffect(function () {\n    if (props.status && props.status.success) {\n      dispatch(setUserData(props.status.data));\n      toast.success('Dados atualizados com sucesso!', {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      router.push('/account');\n    }\n  }, [props.status]);\n  useEffect(function () {\n    props.setFieldValue('id', user.id);\n    props.setFieldValue('name', user.name);\n    props.setFieldValue('email', user.email);\n    props.setFieldValue('phone', user.phone);\n    props.setFieldValue('person_type', user.person_type);\n    props.setFieldValue('document', user.document);\n  }, []);\n  return __jsx(Page, {\n    title: pageTitle,\n    crumbs: crumbs\n  }, __jsx(Layout, {\n    pageTitle: pageTitle\n  }, __jsx(Form, {\n    onSubmit: props.handleSubmit\n  }, props.errors.error && __jsx(Alert, {\n    variant: \"danger\"\n  }, __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.error)), __jsx(Form.Group, {\n    controlId: \"formName\"\n  }, __jsx(Form.Label, null, \"Nome\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: props.values.name,\n    onChange: function onChange(e) {\n      return props.setFieldValue('name', e.target.value);\n    },\n    placeholder: \"Seu nome Completo\"\n  }), props.touched.name && props.errors.name && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.name)), __jsx(Form.Group, {\n    controlId: \"formEmail\"\n  }, __jsx(Form.Label, null, \"E-mail\"), __jsx(Form.Control, {\n    type: \"email\",\n    value: props.values.email,\n    onChange: function onChange(e) {\n      return props.setFieldValue('email', e.target.value);\n    },\n    placeholder: \"E-mail\"\n  }), props.touched.email && props.errors.email && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.email)), __jsx(Form.Group, {\n    controlId: \"formPhone\"\n  }, __jsx(Form.Label, null, \"Celular\"), __jsx(Form.Control, {\n    type: \"text\",\n    value: props.values.phone,\n    onChange: function onChange(e) {\n      return props.setFieldValue('phone', e.target.value);\n    },\n    placeholder: \"Celular\"\n  }), props.touched.phone && props.errors.phone && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.phone)), __jsx(Form.Group, {\n    controlId: \"formPersonType\"\n  }, __jsx(Form.Label, null, \"Tipo de Pessoa\"), __jsx(Form.Control, {\n    as: \"select\",\n    value: props.values.person_type,\n    onChange: function onChange(e) {\n      return props.setFieldValue('person_type', e.target.value);\n    }\n  }, __jsx(\"option\", {\n    value: \"individual\"\n  }, \"Pessoa F\\xEDsica\"), __jsx(\"option\", {\n    value: \"legal\"\n  }, \"Pessoa Jur\\xEDdica\")), props.touched.person_type && props.errors.person_type && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.person_type)), __jsx(Form.Group, {\n    controlId: \"formDocument\"\n  }, __jsx(Form.Label, null, props.values.person_type === 'legal' ? 'CNPJ' : 'CPF'), __jsx(Form.Control, {\n    type: \"text\",\n    value: props.values.document,\n    onChange: function onChange(e) {\n      return props.setFieldValue('document', e.target.value);\n    },\n    placeholder: props.values.person_type === 'legal' ? 'CNPJ' : 'CPF'\n  }), props.touched.document && props.errors.document && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.document)), __jsx(\"div\", {\n    className: \"mt-3 mb-5 d-flex justify-content-end\"\n  }, __jsx(\"button\", {\n    className: \"btn btn-primary\",\n    type: \"submit\"\n  }, \"Salvar\", __jsx(\"i\", {\n    className: \"fas fa-disk\"\n  }), props.isSubmitting && __jsx(Spinner, null))))));\n}\n\nexport default withFormik((_withFormik = {\n  mapPropsToValues: function mapPropsToValues(props) {\n    console.log(props);\n  }\n}, _defineProperty(_withFormik, \"mapPropsToValues\", function mapPropsToValues(props) {\n  return {\n    id: '',\n    name: '',\n    email: '',\n    phone: '',\n    person_type: '',\n    document: ''\n  };\n}), _defineProperty(_withFormik, \"validationSchema\", Yup.object().shape({\n  name: Yup.string().required('Informe seu nome').test('real', 'Informe seu nome completo.', function (value) {\n    if (!value) return;\n    var count = value.split(' ');\n\n    if (!count[1]) {\n      return false;\n    }\n\n    return true;\n  }),\n  email: Yup.string().email('Informe um e-mail válido').required('Informe seu e-mail'),\n  phone: Yup.string().required('Esse campo é obrigatório'),\n  document: Yup.string().required('Esse campo é obrigatório')\n})), _defineProperty(_withFormik, \"handleSubmit\", function handleSubmit(values, _ref) {\n  var setSubmitting, setErrors, props, setStatus, data;\n  return _regeneratorRuntime.async(function handleSubmit$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          setSubmitting = _ref.setSubmitting, setErrors = _ref.setErrors, props = _ref.props, setStatus = _ref.setStatus;\n          _context.prev = 1;\n          setSubmitting(true);\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(patch(\"/profile/\".concat(values.id), values));\n\n        case 5:\n          data = _context.sent;\n\n          if (data.success) {\n            setSubmitting(false);\n            setStatus({\n              success: true,\n              data: values\n            });\n          }\n\n          if (data.validations) {\n            data.validations.map(function (e) {\n              var error = {};\n              error[e.field] = e.message;\n              setErrors(error);\n            });\n          }\n\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          console.log(_context.t0);\n          setErrors({\n            error: 'Não foi possível salvar os dados. Tente novamente.'\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 10]]);\n}), _withFormik))(EditAccount);","map":null,"metadata":{},"sourceType":"module"}