{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Modal, Button, Form, Alert } from \"react-bootstrap\";\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport FormRegister from '../../../components/Pages/Auth/Register/form';\nimport { setUser } from '../../../store/actions/auth';\nimport { post } from '../../../services/http';\nimport './styles.scss';\n\nfunction LoginModal(props) {\n  var _useState = useState(false),\n      showRegister = _useState[0],\n      setShowRegister = _useState[1];\n\n  var dispatch = useDispatch();\n\n  if (props.status && props.status.success) {\n    dispatch(setUser(props.status.data));\n  }\n\n  return __jsx(React.Fragment, null, showRegister && __jsx(Modal, {\n    show: showRegister,\n    onHide: function onHide() {\n      return setShowRegister(false);\n    },\n    size: \"lg\"\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Cadastre-se\")), __jsx(Modal.Body, null, __jsx(FormRegister, {\n    onCancel: function onCancel() {\n      return setShowRegister(false);\n    },\n    onSuccess: function onSuccess() {\n      props.onSuccess();\n    }\n  }))), !showRegister && __jsx(Modal, {\n    show: props.showLogin,\n    onHide: props.closeModal,\n    size: \"lg\"\n  }, __jsx(Form, {\n    onSubmit: props.handleSubmit\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, \"Acesse sua conta\")), __jsx(Modal.Body, null, props.errors.error && __jsx(Alert, {\n    variant: \"danger\"\n  }, __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.error)), __jsx(Form.Group, {\n    controlId: \"formBasicEmail\"\n  }, __jsx(Form.Label, null, \"E-mail\"), __jsx(Form.Control, {\n    type: \"email\",\n    value: props.values.email,\n    onChange: function onChange(e) {\n      return props.setFieldValue('email', e.target.value);\n    },\n    placeholder: \"E-mail\"\n  }), props.touched.email && props.errors.email && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.email)), __jsx(Form.Group, {\n    controlId: \"formBasicPassword\"\n  }, __jsx(Form.Label, null, \"Senha\"), __jsx(Form.Control, {\n    type: \"password\",\n    placeholder: \"Senha\",\n    value: props.values.password,\n    onChange: function onChange(e) {\n      return props.setFieldValue('password', e.target.value);\n    }\n  }), props.touched.password && props.errors.password && __jsx(Form.Control.Feedback, {\n    type: \"invalid\"\n  }, props.errors.password))), __jsx(Modal.Footer, null, __jsx(Button, {\n    variant: \"secondary\",\n    onClick: function onClick() {\n      return setShowRegister(true);\n    }\n  }, \"Cadastre-se\"), __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\"\n  }, \"Acessar minha Conta\")))));\n}\n\nexport default withFormik({\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      email: '',\n      password: ''\n    };\n  },\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email('Informe um e-mail válido').required('Informe seu e-mail'),\n    password: Yup.string().required('Informe sua senha')\n  }),\n  handleSubmit: function handleSubmit(values, _ref) {\n    var setSubmitting, setErrors, props, setStatus, result;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setSubmitting = _ref.setSubmitting, setErrors = _ref.setErrors, props = _ref.props, setStatus = _ref.setStatus;\n            _context.prev = 1;\n            setSubmitting(true);\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(post('/auth/login', values));\n\n          case 5:\n            result = _context.sent;\n\n            if (result.success) {\n              setSubmitting(false);\n              setStatus({\n                success: true,\n                data: result\n              });\n            } else {\n              setSubmitting(false);\n              setErrors({\n                error: 'E-mail ou senha inválidos'\n              });\n            }\n\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            setErrors({\n              error: 'E-mail ou senha inválidos'\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 9]]);\n  }\n})(LoginModal);","map":null,"metadata":{},"sourceType":"module"}